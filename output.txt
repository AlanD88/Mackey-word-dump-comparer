Matching questions with at least 0.9 in common.

Question 2 on Free Response on cmps112-2015q4-final.tt with accuracy 0.9787234042553191: 
   \lambda-calculus.  Given the expression in the \lambda-calculus
   shown at the top of each box, show the derivation order to the
   number 25 for each of normal order and applicative order
   evaluation.  [1pt]

   +-----------------------------------------------------------+------------------------------------------------------------+
   |                 normal order evaluation                   |                applicative order evaluation                |
   +-----------------------------------------------------------+------------------------------------------------------------+
   |$ ( lambda x ~ . ~ ~ * ~ x ~ x ) ~ ~ ( + ~ 2 ~ 3 ) ~ ~ = $ | $ ( lambda x ~ . ~ ~ * ~ x ~ x ) ~ ~ ( + ~ 2 ~ 3 ) ~ ~ = $ |
   |                                                           |                                                            |
   |                                                           |                                                            |
   |                                                           |                                                            |
   +-----------------------------------------------------------+------------------------------------------------------------+



Question 4 on Multiple Choice part 1 on cmps112-2015q4-final.tt with accuracy 0.9047619047619048: 
    What is the Ocaml type signature for the definition:   let f x =
    x;;
    (A) val f : 'a -> 'a = <fun>
    (B) val f : 'a -> 'b -> 'b * 'a = <fun>
    (C) val f : 'a -> 'b -> 'b = <fun>
    (D) val f : int -> int = <fun>



Question 3 on Multiple Choice part 1 on cmps112-2015q4-test1.tt with accuracy 0.9411764705882353: 
    What is type of (+) in Ocaml?
    (A) int * int * int
    (B) int * int -> int
    (C) int -> int * int
    (D) int -> int -> int



Question 10 on Multiple Choice part 2 on cmps112-2016q4-final.tt with accuracy 0.9722222222222222: 
    What is the type of
    let f x y z = x + y + z;;
    (A) val f : int * int * int -> int
    (B) val f : int * int -> int -> int
    (C) val f : int -> int * int -> int
    (D) val f : int -> int -> int -> int



Question 12 on Multiple Choice part 2 on cmps112-2016q4-final.tt with accuracy 0.9166666666666666: 
    What is the signature of Ocaml's List.map?
    (A) ('a -> 'b) -> 'a list -> 'b list
    (B) ('a -> bool) -> 'a list -> 'a list
    (C) ('a -> 'b -> 'a) -> 'a -> 'b list -> 'a
    (D) 'a list -> int




Question 4 on Multiple Choice part 1 on cmps112-2016q4-midterm.tt with accuracy 0.9642857142857143: 
   In the expression (lambda (x) (+ x y))
    (A) x is bound and y is bound.
    (B) x is bound and y is free.
    (C) x is free and y is bound.
    (D) x is free and y is free.



Question 9 on Multiple Choice part 2 on cmps112-2016q4-midterm.tt with accuracy 1.0: 
    Given:
    # List.map ((+)3) [1;2;3];;
    - : int list = [4; 5; 6]
    what is the type of List.map ((+)3)?
    (A) int -> int
    (B) int -> int list
    (C) int list -> int
    (D) int list -> int list



Question 13 on Free Response on cmps112-2017q2-final.tt with accuracy 0.9032258064516129: 
    Define the function map.

    (a) Ocaml.  [2pt]
        # List.map;;
        - : ('a -> 'b) -> 'a list -> 'b list = <fun>
        # List.map ((+)6) [1;2;3;4];;
        - : int list = [7; 8; 9; 10]

    (b) Scheme.  [2pt]
        > (map (lambda (x) (+ x 6)) '(1 2 3 4))
        (7 8 9 10)




Question 6 on Multiple Choice part 2 on cmps112-2017q2-final.tt with accuracy 1.0: 
    Ocaml.  List.hd
    (A) 'a -> 'a
    (B) 'a -> 'a list
    (C) 'a list -> 'a
    (D) 'a list -> 'a list



Question 1 on Multiple Choice part 1 on cmps112-2017q4-final.tt with accuracy 0.9583333333333334: 
    What is the type of f:
    let f (x, y) = x + y;;
    (A) f : int * int * int
    (B) f : int * int -> int
    (C) f : int -> int * int
    (D) f : int -> int -> int



Question 2 on Multiple Choice part 1 on cmps112-2017q4-final.tt with accuracy 0.9230769230769231: 
    What is the type of g:
    let g x y = x * y;;
    (A) f : int * int * int
    (B) f : int * int -> int
    (C) f : int -> int * int
    (D) f : int -> int -> int



Question 8 on Multiple Choice part 1 on cmps112-2017q4-final.tt with accuracy 0.9166666666666666: 
    What is (1 2 3 4)
    (A) (apply * '(1 2 3 4))
    (B) (cons * '(1 2 3 4))
    (C) (foldl * '(1 2 3 4))
    (D) (map * '(1 2 3 4))



Question 3 on Free Response on cmps112-2017q4-midterm.tt with accuracy 0.9117647058823529: 
   Scheme.  Define map.  [2pt]
   > (map (lambda (x) (+ 5 x)) '(1 2 3 4))
   (6 7 8 9)
   > (map (lambda (x) (cons 5 x)) '(1 2 3 4))
   ((5 . 1) (5 . 2) (5 . 3) (5 . 4))



Question 10 on Multiple Choice part 1 on cmps112-2017q4-midterm.tt with accuracy 0.9285714285714286: 
    Type of (+)?
    (A) int * int * int
    (B) int * int -> int
    (C) int -> int * int
    (D) int -> int -> int



Question 12 on Multiple Choice part 1 on cmps112-2017q4-midterm.tt with accuracy 0.9545454545454546: 
    In the expression $ ( \lambda x . ( + x ) y ) $
    (A) $x$ is bound and $y$ is bound.
    (B) $x$ is bound and $y$ is free.
    (C) $x$ is free and $y$ is bound.
    (D) $x$ is free and $y$ is free.

+---------------------------------+
|                                 |
|                                 |
|                                 |
|                                 |
|                                 |
|                                 |
|                                 |
|jpgs/math-but-yesterday-you-said.ps
|                                 |
|                                 |
|                                 |
|                                 |
|                                 |
|                                 |
|                                 |
+---------------------------------+




Question 3 on Multiple Choice part 1 on cmps112-2018q1-final.tt with accuracy 1.0: 
    # sqrt;;
    (A) - : float * float = <fun>
    (B) - : float -> float = <fun>
    (C) - : int * int = <fun>
    (D) - : int -> int = <fun>



Question 4 on Multiple Choice part 1 on cmps112-2018q1-final.tt with accuracy 1.0: 
    10
    (A) (apply '+ '(1 2 3 4))
    (B) (apply '+ (1 2 3 4))
    (C) (apply + '(1 2 3 4))
    (D) (apply + (1 2 3 4))



Question 5 on Multiple Choice part 1 on cmps112-2018q1-final.tt with accuracy 1.0: 
    # (<) 2;;
    (A) - : 'a -> bool = <fun>
    (B) - : bool -> 'a = <fun>
    (C) - : bool -> int = <fun>
    (D) - : int -> bool = <fun>



Question 3 on Multiple Choice part 2 on cmps112-2018q1-midterm.tt with accuracy 0.9230769230769231: 
    Output of:
    # (-);;
    (A) - : int * int * int = <fun>
    (B) - : int * int -> int = <fun>
    (C) - : int -> int * int = <fun>
    (D) - : int -> int -> int = <fun>



Question 5 on Multiple Choice part 2 on cmps112-2018q1-midterm.tt with accuracy 0.9090909090909091: 
    What will print:
    (1 2 7)
    (A) '(1 2 ,(+ 3 4))
    (B) ,(1 2 `(+ 3 4))
    (C) `(1 2 '(+ 3 4))
    (D) `(1 2 ,(+ 3 4))



